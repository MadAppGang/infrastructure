terraform {
  backend "s3" {
    bucket = "{{ state_bucket }}"
    key    = "{{ state_file }}"
    region = "{{ region  }}"
  }
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  required_version = ">= 1.2.6"
}

data "aws_vpc" "default" {
  default = true
}

data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_subnets" "all" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

# Locals removed - using direct handlebar resolution in modules
{{#if domain.enabled}}
  {{#compare env "==" "prod"}}
    {{#if domain.zone_id}}
    # PROD: Use existing root zone
    data "aws_route53_zone" "main" {
      zone_id = "{{ domain.zone_id }}"
    }
    {{/if}}
    
    module "domain" {
      source = "{{ modules }}/domain"
      project = "{{ project }}"
      domain_zone = "{{ domain.domain_name }}"
      env = "{{ env }}"
      create_domain_zone = false  # Zone already exists
      zone_id = "{{ domain.zone_id }}"  # Pass existing zone ID
      api_domain_prefix = "{{ domain.api_domain_prefix }}"
      add_env_domain_prefix = false  # No prefix for production
    }
  {{else}}
    {{#if domain.root_zone_id}}
    # NON-PROD: Create subdomain with delegation
    provider "aws" {
      alias = "root"
      assume_role {
        role_arn = "arn:aws:iam::{{ domain.root_account_id }}:role/dns-delegation"
      }
    }
    
    module "dns_delegation" {
      source = "{{ modules }}/dns-delegation"
      providers = {
        aws.root = aws.root
      }
      subdomain = "{{ env }}.{{ domain.domain_name }}"
      root_domain = "{{ domain.domain_name }}"
      root_zone_id = "{{ domain.root_zone_id }}"
      root_account_id = "{{ domain.root_account_id }}"
      environment = "{{ env }}"
      tags = {
        Project = "{{ project }}"
        Environment = "{{ env }}"
      }
    }
    
    module "domain" {
      source = "{{ modules }}/domain"
      project = "{{ project }}"
      domain_zone = "{{ env }}.{{ domain.domain_name }}"  # Use subdomain
      env = "{{ env }}"
      create_domain_zone = false  # Zone created by dns_delegation
      zone_id = module.dns_delegation.zone_id  # Use delegated zone
      api_domain_prefix = "{{ domain.api_domain_prefix }}"
      add_env_domain_prefix = false  # Already prefixed
      depends_on = [module.dns_delegation]
    }
    {{else}}
    # Fallback: Standard domain configuration
    module "domain" {
      source = "{{ modules }}/domain"
      project = "{{ project }}"
      domain_zone = "{{ domain.domain_name }}"
      env = "{{ env }}"
      create_domain_zone = {{ domain.create_domain_zone }}
      api_domain_prefix = "{{ domain.api_domain_prefix }}"
      add_env_domain_prefix = {{default domain.add_env_domain_prefix true}}
    }
    {{/if}}
  {{/compare}}
{{/if}}


{{#if postgres.enabled}} 
module "postgres" {
  source = "{{modules}}/postgres"
  project = "{{project}}"
  env = "{{env}}"
  vpc_id     = data.aws_vpc.default.id
  subnet_ids = data.aws_subnets.all.ids
  db_name = "{{postgres.dbname}}"
  username = "{{postgres.username}}"
  public_access = {{ postgres.public_access }}
  engine_version = "{{ postgres.engine_version}}"
  {{#if postgres.aurora}}
  aurora = true
  {{#if postgres.min_capacity}}
  min_capacity = {{postgres.min_capacity}}
  {{/if}}
  {{#if postgres.max_capacity}}
  max_capacity = {{postgres.max_capacity}}
  {{/if}}
  {{/if}}
}
{{/if}}

{{#if sqs.enabled}}
module "sqs" {
  source = "{{modules}}/sqs"
  project = "{{project}}"
  name = "{{sqs.name}}"
  env = "{{env}}"
}
{{/if}}

{{#compare (len efs) ">" 0}}
module "efs" {
  source = "{{modules}}/efs"
  project = "{{project}}"
  env = "{{env}}"
  vpc_id = data.aws_vpc.default.id
  private_subnets = data.aws_subnets.all.ids
  efs_configs = {{{array efs}}}
}
{{/compare}}
{{#compare (len buckets) ">" 0}}
module "s3" {
  source = "{{modules}}/s3"
  project = "{{project}}"
  env = "{{env}}"
  buckets = {{{array buckets}}}
}
{{/compare}}
{{#if alb.enabled}}
module "alb" {
  source = "{{modules}}/alb"
  project = "{{project}}"
  env = "{{env}}"
  vpc_id = data.aws_vpc.default.id
  private_subnets = data.aws_subnets.all.ids
}
{{/if}}
module "workloads" {
  source = "{{ modules }}/workloads"
  project    = "{{project}}"
  env        = "{{env}}" 
  private_dns_name = "{{project}}_{{env}}.private"
  {{#if domain.enabled}}
  api_domain = module.domain.api_domain_name
  {{#compare (len domain.api_domain_prefix) ">" 0}}
  create_api_domain_record = true
  {{else}}
  create_api_domain_record = false
  {{/compare}}
  {{else}}
  api_domain = "{{ domain.domain_name }}"
  create_api_domain_record = false
  {{/if}}
  domain = "{{ domain.domain_name }}"
  vpc_id     = data.aws_vpc.default.id
  subnet_ids = data.aws_subnets.all.ids
  lambda_path = "{{modules}}/workloads/ci_lambda/bootstrap"
  slack_deployment_webhook = "{{workload.slack_webhook}}"
  backend_bucket_postfix = "{{workload.bucket_postfix}}"
  backend_bucket_public = {{workload.bucket_public}}
  backend_health_endpoint = "{{workload.backend_health_endpoint}}"
  backend_remote_access = {{default workload.backend_remote_access true}}
  docker_image = "{{workload.backend_external_docker_image}}"
  setup_FCM_SNS = {{workload.setup_fcnsns}}
  backend_image_port = {{workload.backend_image_port}}
  {{#if postgres.enabled}}

  db_endpoint = module.postgres.endpoint
  db_user = "{{postgres.username}}"
  db_name = "{{postgres.dbname}}"
  {{/if}}
  {{#if domain.enabled}}
  subdomains_certificate_arn = module.domain.subdomains_certificate_arn
  api_certificate_arn = module.domain.api_certificate_arn
  domain_zone_id = module.domain.zone_id
  {{/if}}
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_backend"
  {{/if}}{{/if}}
  github_oidc_enabled = {{workload.enable_github_oidc}}
  github_subjects = {{{array workload.github_oidc_subjects}}}
  {{#if workload.backend_container_command}}
  backend_container_command = {{array backend_container_command}}
  {{/if}}
  xray_enabled = {{workload.xray_enabled}}
  pgadmin_enabled = {{workload.install_pg_admin}}
  pgadmin_email = "{{workload.pg_admin_email}}"
  backend_env = {{{ envArray workload.backend_env_variables }}}
  
  # Backend scaling configuration
  {{#if workload.backend_cpu}}
  backend_cpu = {{workload.backend_cpu}}
  {{/if}}
  {{#if workload.backend_memory}}
  backend_memory = {{workload.backend_memory}}
  {{/if}}
  {{#if workload.backend_desired_count}}
  backend_desired_count = {{workload.backend_desired_count}}
  {{/if}}
  
  # Backend autoscaling configuration
  {{#if workload.backend_autoscaling_enabled}}
  backend_autoscaling_enabled = {{workload.backend_autoscaling_enabled}}
  {{/if}}
  {{#if workload.backend_autoscaling_min_capacity}}
  backend_autoscaling_min_capacity = {{workload.backend_autoscaling_min_capacity}}
  {{/if}}
  {{#if workload.backend_autoscaling_max_capacity}}
  backend_autoscaling_max_capacity = {{workload.backend_autoscaling_max_capacity}}
  {{/if}}
  {{#if workload.backend_autoscaling_target_cpu}}
  backend_autoscaling_target_cpu = {{workload.backend_autoscaling_target_cpu}}
  {{/if}}
  {{#if workload.backend_autoscaling_target_memory}}
  backend_autoscaling_target_memory = {{workload.backend_autoscaling_target_memory}}
  {{/if}}
  {{#if sqs.enabled}}
  sqs_queue_url = module.sqs.queue_url
  sqs_policy_arn = module.sqs.sqs_access_policy_arn
  sqs_enable = true
  {{/if}}
  {{#compare (len workload.efs) ">" 0}}
  available_efs = { 
    {{#each efs}}
    {{name}} = {
      id = module.efs.efs_configs.{{name}}.id
      access_point_id = module.efs.efs_configs.{{name}}.access_point_id
      dns_name = module.efs.efs_configs.{{name}}.dns_name
      security_group = module.efs.efs_configs.{{name}}.security_group
      root_directory = module.efs.efs_configs.{{name}}.path
    }
    {{/each}}
  }
  backend_efs_mounts = [
    {{#each workload.efs}}
    {
      efs_name = "{{name}}"
      mount_point = "{{mount_point}}"
    },
    {{/each}}
  ]
  {{/compare}}
  {{#compare (len workload.env_files_s3) ">" 0}}
  env_files_s3 = {{{array workload.env_files_s3}}} 
  {{/compare}}
  {{#if alb.enabled}}{{#if workload.backend_alb_domain_name}}
  backend_alb_domain_name = "{{workload.backend_alb_domain_name}}"
  alb_arn = module.alb.alb_arn
  enable_alb = true
  {{/if}}{{/if}}
  {{#compare (len services) ">" 0}}
  services = {{{array services}}} 
  {{/compare}}
  backend_policy = [
  {{#each workload.policy}}
    {
      actions = {{{array actions}}}
      resources = {{{array resources}}}
    }{{#unless @last}},{{/unless}}
  {{/each}}
  ]
}
{{#if cognito.enabled}} 
module "cognito" {
  source                  = "{{modules}}/cognito"
  project                 = "{{project}}"
  env                     = "{{env}}"
  enable_web_client       = "{{cognito.enable_web_client}}"
  enable_dashboard_client = {{cognito.enable_dashboard_client}}
  dashboard_callback_urls = {{array cognito.dashboard_callback_urls}}

  enable_user_pool_domain = {{cognito.enable_user_pool_domain}}
  user_pool_domain_prefix = "{{cognito.user_pool_domain_prefix}}"

  allow_backend_task_to_confirm_signup = {{cognito.backend_confirm_signup}}
  auto_verified_attributes = {{array cognito.auto_verified_attributes}}
  backend_task_role_name  = module.workloads.backend_task_role_name
}
{{/if}}
{{#each scheduled_tasks}}
# scheduled task
# https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role
module "schedule_task_{{name}}" {
  source = "{{@root.modules}}/ecs_task"
  project = "{{@root.project}}"
  env = "{{@root.env}}"
  task = "{{name}}"
  {{#if docker_image}}
  docker_image = "{{docker_image}}"
  {{/if}}
  {{#if container_command}}
  container_command = {{{ container_command }}}
  {{/if}}
  # https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html?icmpid=docs_console_unmapped#rate-based
  schedule = "{{schedule}}"
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
  allow_public_access = {{#if allow_public_access}}{{allow_public_access}}{{else}}false{{/if}}
  {{#if sqs.enabled}}
  sqs_queue_url = module.sqs.queue_url
  sqs_policy_arn = module.sqs.sqs_access_policy_arn
  sqs_enable = true
  {{/if}}
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_task_{{name}}"
  {{/if}}{{/if}}
}
{{/each}}
{{#each event_processor_tasks}}
module "event_bus_task_{{name}}" {
  source = "{{@root.modules}}/event_bridge_task"
  project = "{{@root.project}}"
  env = "{{@root.env}}"
  # https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events.html
  detail_types = {{{array detail_types}}}
  sources = {{{array sources}}}
  rule_name = "{{rule_name}}"
  task = "{{name}}"
  {{#if docker_image}}
  docker_image = "{{docker_image}}"
  {{/if}}
  {{#if container_command}}
  container_command = {{{ container_command }}}
  {{/if}}
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
  {{#if sqs.enabled}}
  sqs_queue_url = module.sqs.queue_url
  sqs_policy_arn = module.sqs.sqs_access_policy_arn
  sqs_enable = true
  {{/if}}
  allow_public_access = {{#if allow_public_access}}{{allow_public_access}}{{else}}false{{/if}}
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_task_{{name}}"
  {{/if}}{{/if}}
}
{{/each}}


# Email domain resolved directly in SES module
{{#if ses.enabled}} 
module "ses" {
  source = "{{modules}}/ses"
  project = "{{project}}"
  env     = "{{env}}"
  {{#if ses.domain_name}}
  domain = "{{ses.domain_name}}"
  {{else}}
    {{#compare env "==" "prod"}}
  domain = "mail.{{ domain.domain_name }}"
    {{else}}
  domain = "mail.{{ env }}.{{ domain.domain_name }}"
    {{/compare}}
  {{/if}}
  test_emails = {{{array ses.test_emails}}}
  {{#if domain.enabled}}
  zone_id = module.domain.zone_id
  {{/if}}
}
{{/if}}



{{#if pubsub_appsync.enabled}} 
module "appsync" {
  source = "{{modules}}/appsync"
  project = "{{project}}"
  env = "{{env}}"
  {{#if pubsub_appsync.schema}}
  schema_file = "{{custom_modules}}/appsync/schema.graphql"
  {{/if}}
  {{#if appsync.resolvers}}
  vtl_templates_yaml = "{{custom_modules}}/appsync/vtl_templates.yaml"
  {{/if}}
  {{#if pubsub_appsync.appsync.auth_lambda}}
  auth_lambda_path = "{{custom_modules}}/appsync/auth_lambda"
  {{/if}}
}
{{/if}}

{{#compare (len amplify_apps) ">" 0}}
module "amplify" {
  source = "{{modules}}/amplify"
  project = "{{project}}"
  env = "{{env}}"
  
  amplify_apps = [
    {{#each amplify_apps}}
    {
      name = "{{name}}"
      github_repository = "{{github_repository}}"
      branches = [
        {{#each branches}}
        {
          name = "{{name}}"
          {{#if stage}}
          stage = "{{stage}}"
          {{/if}}
          {{#if enable_auto_build}}
          enable_auto_build = {{enable_auto_build}}
          {{/if}}
          {{#if enable_pull_request_preview}}
          enable_pull_request_preview = {{enable_pull_request_preview}}
          {{/if}}
          {{#if environment_variables}}
          environment_variables = {
            {{#each environment_variables}}
            {{@key}} = "{{this}}"{{#unless @last}},{{/unless}}
            {{/each}}
          }
          {{/if}}
          {{#if custom_subdomains}}
          custom_subdomains = {{{array custom_subdomains}}}
          {{/if}}
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]
      {{#if custom_domain}}
      custom_domain = "{{custom_domain}}"
      {{/if}}
      {{#if enable_root_domain}}
      enable_root_domain = {{enable_root_domain}}
      {{/if}}
    }{{#unless @last}},{{/unless}}
    {{/each}}
  ]
}
{{/compare}}


output "backend_ecr_repo_url" {
  value = module.workloads.backend_ecr_repo_url
}

output "account_id" {
  value = module.workloads.account_id
}

output "region" {
  value = data.aws_region.current.name
}

output "backend_task_role_name" {
  value = module.workloads.backend_task_role_name
}

output "backend_cloud_map_arn" {
  description = "value of the backend service discovery ARN"
  value       = module.workloads.backend_cloud_map_arn
}

{{#compare (len amplify_apps) ">" 0}}
output "amplify_apps" {
  description = "Map of all Amplify app details including branches"
  value = module.amplify.amplify_apps
}

output "amplify_app_urls" {
  description = "Map of primary URLs to access the Amplify applications"
  value = module.amplify.app_urls
}

output "amplify_branch_urls" {
  description = "Map of all branch URLs for each Amplify app"
  value = module.amplify.branch_urls
}

{{#each amplify_apps}}
output "amplify_{{name}}_app_id" {
  description = "The unique ID of the {{name}} Amplify app"
  value       = module.amplify.app_ids["{{name}}"]
}

output "amplify_{{name}}_app_url" {
  description = "The URL to access the {{name}} Amplify application"
  value       = module.amplify.app_urls["{{name}}"]
}

output "amplify_{{name}}_default_domain" {
  description = "The default domain for the {{name}} Amplify app"
  value       = module.amplify.default_domains["{{name}}"]
}

output "amplify_{{name}}_branches" {
  description = "All branches for the {{name}} Amplify app"
  value       = module.amplify.amplify_apps["{{name}}"].branches
}
{{/each}}
{{/compare}}
